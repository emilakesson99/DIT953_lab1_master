- Refaktorisering

- En Interface läggs till för att skicka vidare data till view från modellen.
- En lista med observers läggs till i modellen samt metoder för att uppdatera varje observer.
- Vi skickar det det nuvarande objektet i modellen för att ritas.

Observer interface har en generisk metod "update" med implementation beroende på vilket objekt som ska ritas.

"update" metoden kommer att läggas i tex DrawPanel som ritar bilarna för varje frame.
Den måste integreras med nuvarande paintComponent();


	Interface: <T> void update(T v);
	View-klass som lyssnar: @Override
   				 public <T> void update(T v) {
       					 Vehicle vehicle = (Vehicle) v;
					 //använd vehicle's metoder..
    							}

- Nya ändringar i existerande kod:
	- CarView (och Drawpanel) hanterar mer än bara visning av grafik (Flytta actionListeners)
	- Bygga en CarApp klass där applikationen initieras.
	- integrera updaterings metoden med CarController så att den kallas kontinuerligt.

DIP: Just nu beror CarC på Scania och saab istället för Abstraktioner. Vi kan Skapa interfaces för både Scania (turbo) och Scania(bed).
Då slipper vi söka efter den i listan och kan istället bero på interfacet.
Vi kan också skapa flera listor med fordon där en lista bara har bilar med turbo och en annan har en med bara fordon med flak.
Modellen ska inte heller vara beronde på vyer men istället vara beronde på Abstraktionen vehicleObserver interface.

OCP: Om vi bygger om koden efter Observer Pattern öppnar det för extenstions för att vi då kan lägga till flera vyer utan att ändra modellen.

ISP : Just nu finns turbo inuti Saab men vi kan skapa ett interface som har turbo i sig.
Då skulle vi också kunna skapa mer bilar med turbo om det skulle behövas.
Vi skulle kunna göra samma sak med Scania och bed.

